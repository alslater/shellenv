platform=$(uname -s)

case ${platform} in
  SunOS)
    if [ -z "${UPOS1TRAD}" ]; then
      if [[ -d /opt/essiell2019 ]]; then
        pkgsrc=/opt/essiell2019
        export UPOS1PLATFORM=omnios-x64-gcc
        # For OI
  	    [ -x /usr/gcc/10/bin/gcc ] && PATH=/usr/gcc/10/bin:$PATH 
	    export UPOS1=~/upos1.64
      else
        pkgsrc=/opt/scl64
        export UPOS1PLATFORM=omnios-x64-gcc4
	    export UPOS1=~/upos1.64.gcc4
      fi
    else
      pkgsrc=/opt/scl64
      export UPOS1PLATFORM=omnios-x64-gcc4
	  export UPOS1=~/upos1.64.gcc4
    fi

	# Oracle settings
	export ORACLE_OWNER=oracle
	export ORACLE_BASE=${pkgsrc}/oracle/11
	export ORACLE_HOME=$ORACLE_BASE
	export PATH=$PATH:$ORACLE_HOME
	export LD_LIBRARY_PATH_64=$ORACLE_HOME:$LD_LIBRARY_PATH_64

	# OmniOrb
	OMNIVER=4_1
	export OMNIROOT=${pkgsrc}
	export OMNIORB_CONFIG=${HOME}/.omniorb/omniORB.cfg
	export OMNINAMES_LOGDIR=/var/tmp

	# Upos
	export UPOS1DBUSER=aslate
	export UPOS1DBALIAS=o9
	export UPOS1DEBUG=1
	export UPOS1RELEASE=${HOME}/dev/ultrapos/upos1/release
	export UPOSHOME=${HOME}/dev/ultrapos
	export UPOS1ROOT=${HOME}/dev/ultrapos/upos1
	export UPOS1DBPASSWORD=servo
	#export UPOS1PLATFORM=omnios-x64-gcc4
	export M4T=${HOME}/dev/ultrapos/middleware
	export MW=${HOME}/dev/ultrapos/middleware

	export PATH=$PATH:$UPOS1/bin
	export LD_LIBRARY_PATH_64=$LD_LIBRARY_PATH:$UPOS1/lib
    ;;

  Linux)
	# OmniOrb
	OMNIVER=4_1
	export OMNIROOT=/
	export OMNIORB_CONFIG=${HOME}/.omniorb/omniORB.cfg
	export OMNINAMES_LOGDIR=/var/tmp

	# Upos
	export UPOS1DBUSER=aslate
	export UPOS1DBALIAS=o9
	export UPOS1=~/upos1
	export UPOS1DEBUG=1
	export UPOS1RELEASE=${HOME}/dev/ultrapos/upos1/release
	export UPOSHOME=${HOME}/dev/ultrapos
	export UPOS1ROOT=${HOME}/dev/ultrapos/upos1
	export UPOS1DBPASSWORD=servo
	export UPOS1PLATFORM=linux-x64-gcc
	export M4T=${HOME}/dev/ultrapos/middleware
	export MW=${HOME}/dev/ultrapos/middleware

	export PATH=$PATH:$UPOS1/bin
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$UPOS1/lib

	if [ -d /opt/oracle/instantclient_21_1 ]; then
		export ORACLE11_HOME=/opt/oracle/instantclient_21_1
		export PATH=${ORACLE11_HOME}:${PATH}
	else
		export ORACLE11_HOME=${UPOS1ROOT}/../vendor/${UPOS1PLATFORM}/oracle/instantclient_21_1
		export PATH=${ORACLE11_HOME}:${PATH}
	fi
	export LD_LIBRARY_PATH=${ORACLE11_HOME}:${LD_LIBRARY_PATH}

  	;;
esac

export UPOSSPECIALS=~/dev/ultrapos_specials

function switch_env
{
	bookmark=${1}

	if [ -z "${bookmark}" ]; then
		echo "Usage: switch_env bookmark"
		return 1
	fi


	UPOSDEVHOME=${UPOSHOME}
	UPOSTGT=${UPOSHOME}_${bookmark}

	echo "Checking ultrapos home symlink ${UPOSDEVHOME}..."
	if [ ! -L ${UPOSDEVHOME} ]; then
		echo "Error: ${UPOSDEVHOME} is not a symlink"
		return 1
	fi

	echo "Checking ultrapos target ${UPOSTGT}"
	if [ ! -d ${UPOSTGT} ]; then
		echo "Error: ${UPOSTGT} does not exist or is not a folder"
		return 1
	fi

	echo "Stopping any running servers..."
	cd ${UPOSDEVHOME}/middleware/servers
	[ -x ./ols ] && ./ols -shutdown 2>&1


	cd ${UPOSHOME}/..

	echo "Removing ultrapos home symlink ${UPOSDEVHOME}"
	rm ${UPOSDEVHOME}

	echo "Relinking ultrapos home symlink ${UPOSTGT}"
	ln -s ${UPOSTGT} ${UPOSDEVHOME}

	cd ${UPOSDEVHOME}
	hg bookmarks | grep "\*"

	if [ -x ${UPOSDEVHOME}/middleware/cgw2/${UPOS1PLATFORM}/libcgw.so ]; then
		echo "CGW module present, restarting apache"
		~/apache/bin/apachectl restart
	else
		echo "CGW module not present, stopping apache"
		~/apache/bin/apachectl stop
	fi
}

function list_envs
{
	envs="$(ls -d ${UPOSHOME}/../ultrapos_m* | grep -v maint) $(ls -d ${UPOSHOME}/../ultrapos_b* 2>/dev/null)"

	for i in ${envs}; do
    	if test -d ${i}; then
		    bn=$(basename ${i})
    		tag=${bn/ultrapos_/}
			printf "%s %s\n" ${bn} ${tag}
    	fi
	done
}

function current_env
{
	ln=$(readlink ${UPOSHOME})
	bn=$(basename ${ln})
    tag=${bn/ultrapos_/}
	printf "%s %s\n" ${bn} ${tag}
}

function copy_specials {
	if [[ -z ${1} ]]; then
		echo "Usage:"
		echo "   copy_specials NAME [ REVISION ]"
		echo
		echo "Copies the specials for the named client into your currently configured working area. This means"
		echo "you must have used 'setver' before you use this command."
		echo "You will need to do this before you can run UltraPoS."
		echo
		echo "NAME is the client/branch name to copy, and can be 'standard' for the base files."
		echo "REVISION is the optional mercurial revision you need. Without this the tip of the branch"
		echo "will be copied."
		echo 
		echo "If you want to set up to work with a specific client, then you will need to copy standard"
		echo "AND the client, bearing in mind you may need to specify different revisions for each. Eg"
		echo
		echo "   copy_specials standard up_2_9"
		echo "   copy_specials mandsbank"
		echo
		echo "If $UPOSSPECIALS is set it will be taken as the directory containing the repository to copy from."
		echo "Otherwise the current directory will be used, which must be the root of the repository."
		echo 
		echo "NOTE: May change your CWD and WILL update the specials repository - make sure you've got no pending"
		echo "updates."
		echo "NOTE: Does NOT copy client reports (to avoid accidental commits to the wrong place). If you need them"
		echo "then copy them manually, remembering to undo any changes before you commit other changes."
		return 1
	fi

	if [[ -z ${UPOSHOME} ]]; then
		echo "UPOSHOME is not set"
		return 1
	fi

	# Get the files.
	if [[ -z ${UPOSSPECIALS} ]]; then
		spec_dir=`pwd`
	else
		spec_dir=${UPOSSPECIALS}
	fi
	cd ${spec_dir}

	if [[ ! -z ${2} ]]; then
		rev="-r ${2}"
	else
		rev=""
	fi
	if [[ ! -f .hg/hgrc ]]; then
		echo "Not in the root of a repository. You must run this from the root of the specials repository"
		echo "or have UPOSSPECIALS set."
		return 1
	fi
	hg -q update ${rev} ${1} 
	if [[ $? != 0 ]]; then
		echo "hg update failed"
		return 1
	fi	

	# Got the files, put them where they should be	
	if [[ -d ui ]]; then
		cp -r ui ${UPOSHOME}
	fi	
	if [[ -d webroot ]]; then
		cp -r webroot ${UPOSHOME}
	fi
}
